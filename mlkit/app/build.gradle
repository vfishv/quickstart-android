apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.example.test"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    signingConfigs {
        release {
            // These must be set or Gradle will complain (even if they are overridden).
            storeFile file("./xxxx.jks")
            storePassword 'xxx'
            keyAlias 'xxx'
            keyPassword 'xxx'
            v1SigningEnabled true
            v2SigningEnabled true
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    aaptOptions {
        noCompress "tflite"
    }
    packagingOptions {
        exclude 'META-INF/androidx.exifinterface_exifinterface.version'
        exclude 'META-INF/proguard/androidx-annotations.pro'
    }

    splits {
        // Configures multiple APKs based on ABI.
        abi {
            // Enables building multiple APKs per ABI.
            enable true
            // By default all ABIs are included, so use reset() and include to specify that we only
            // want APKs for x86 and x86_64.

            // Resets the list of ABIs that Gradle should create APKs for to none.
            reset()
            // Specifies a list of ABIs that Gradle should create APKs for.
            include 'armeabi-v7a'//'armeabi','x86'//, 'armeabi-v7a','mips'
            //include 'x86', 'x86_64', 'armeabi-v7a', 'arm64-v8a' //select ABIs to build APKs for

            // Specifies that we do not want to also generate a universal APK that includes all ABIs.
            universalApk false //generate an additional APK that contains all the ABIs
        }
    }

}

dependencies {
    //implementation project(":internal:lintchecks")
    //implementation project(':internal:chooserx')
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.41"

    implementation 'androidx.appcompat:appcompat:1.0.2'
    //implementation 'androidx.camera:camera-camera2:1.0.0-alpha01'
    //implementation 'androidx.camera:camera-core:1.0.0-alpha02'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.media:media:1.0.1'
    implementation 'com.google.android.material:material:1.0.0'

    // ML Kit dependencies
    implementation 'com.google.firebase:firebase-ml-vision:22.0.0'
    // Image Labeling model.
    //implementation 'com.google.firebase:firebase-ml-vision-image-label-model:18.0.0'
    // Face model
    implementation 'com.google.firebase:firebase-ml-vision-face-model:18.0.0'
    // Custom model
    //implementation 'com.google.firebase:firebase-ml-model-interpreter:20.0.1'
    // Object model
    //implementation 'com.google.firebase:firebase-ml-vision-object-detection-model:18.0.0'
    // AutoML model
    //implementation 'com.google.firebase:firebase-ml-vision-automl:18.0.0'

    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
}
apply plugin: 'com.google.gms.google-services'
